package main

import (
	"fmt"
	"path"
	"runtime"
)

func readFile(filepath string) []int {
	input := "59717238168580010599012527510943149347930742822899638247083005855483867484356055489419913512721095561655265107745972739464268846374728393507509840854109803718802780543298141398644955506149914796775885246602123746866223528356493012136152974218720542297275145465188153752865061822191530129420866198952553101979463026278788735726652297857883278524565751999458902550203666358043355816162788135488915722989560163456057551268306318085020948544474108340969874943659788076333934419729831896081431886621996610143785624166789772013707177940150230042563041915624525900826097730790562543352690091653041839771125119162154625459654861922989186784414455453132011498"
	signal := make([]int, 0)
	for _, c := range input {
		signal = append(signal, int(c-'0'))
	}
	return signal
}

func part1(signal []int) []int {
	pattern := []int{0, 1, 0, -1}
	for phase := 1; phase <= 100; phase++ {
		newSignal := make([]int, len(signal))
		for i := 0; i < len(signal); i++ {
			sum := 0
			for j := 0; j < len(signal); j++ {
				index := ((j + 1) / (i + 1)) % 4
				sum += pattern[index] * signal[j]
			}
			if sum < 0 {
				sum *= -1
			}
			newSignal[i] = sum % 10
		}
		signal = newSignal
	}
	return signal[:8]

}

func main() {
	_, filename, _, _ := runtime.Caller(0)
	filepath := path.Join(path.Dir(filename), "day14.txt")
	signal := readFile(filepath)
	fmt.Println(part1(signal))
}
